plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.170'
}

tasks.named('wrapper', Wrapper).configure {
    // Define wrapper values here so as to not have to always do so when updating gradlew.properties.
    // Switching this to Wrapper.DistributionType.ALL will download the full gradle sources that comes with
    // documentation attached on cursor hover of gradle classes and methods. However, this comes with increased
    // file size for Gradle. If you do switch this to ALL, run the Gradle wrapper task twice afterwards.
    // (Verify by checking gradle/wrapper/gradle-wrapper.properties to see if distributionUrl now points to `-all`)
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

// Mojang ships Java 21 to end users starting in 1.20.5, so mods should target Java 21.
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

jarJar.enable()
def slimClassifier = 'slim'
tasks.named('jar') {
    archiveClassifier = slimClassifier
}
tasks.named('jarJar') {
    archiveClassifier = ''
}
tasks.register('deleteSlimJar') {
    doLast {
        delete "$buildDir/libs/datanessence-${version}-${slimClassifier}.jar"
    }
    dependsOn tasks.named('jarJar')
}
build.configure { finalizedBy tasks.named('deleteSlimJar') }

minecraft {
    accessTransformers {
        file('src/main/resources/META-INF/accesstransformer.cfg')
    }
}

// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
        dependencies {
            runtime('org.jgrapht:jgrapht-core:1.5.2')
            runtime('org.jheaps:jheaps:0.14')
            runtime('org.apfloat:apfloat:1.14.0')
        }
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        arguments.addAll('--username', '####')
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        arguments.addAll(
                '--mod', project.mod_id,
                '--all',
                '--output', file('src/generated/resources/').getAbsolutePath(),
                '--existing', file('src/main/resources/').getAbsolutePath(),
                '--existing-mod', 'opalescence'
        )
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
    runtimeClasspath.extendsFrom localRuntime
}

repositories {
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    flatDir {
        dir 'libs'
    }
    maven {
        name = 'GeckoLib'
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
        content {
            includeGroupByRegex("software\\.bernie.*")
            includeGroup("com.eliotlash.mclib")
        }
    }
    maven { url 'https://maven.blamejared.com' }
    maven {
        url = "https://maven.theillusivec4.top/"
    }
    maven { url = "https://maven.terraformersmc.com/" }
    maven {
        url = "https://api.modrinth.com/maven"
    }
    maven { url = 'https://modmaven.dev/' } // Mekanism
    mavenCentral()
}
dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    implementation "blank:databank-1.1.0"
    implementation "com.eliotlash.mclib:mclib:20"
    compileOnly "dev.emi:emi-neoforge:${emi_version}:api"
    localRuntime "dev.emi:emi-neoforge:${emi_version}"

    implementation "maven.modrinth:iris:1.8.1+1.21.1-neoforge"
    implementation "maven.modrinth:sodium:mc1.21.1-0.6.7-neoforge"

    compileOnly "mekanism:Mekanism:${mekanism_version}:api"
    localRuntime "mekanism:Mekanism:${mekanism_version}"

    implementation "curse.maven:opalescence-1255577:6485811"

    implementation('org.jgrapht:jgrapht-core:1.5.2')
    jarJar (group: 'org.jgrapht', name: 'jgrapht-core', version: '[1.5.2,)')
    implementation('org.jheaps:jheaps:0.14')
    jarJar (group: 'org.jheaps', name: 'jheaps', version: '[0.14,)')
    implementation('org.apfloat:apfloat:1.14.0')
    jarJar (group: 'org.apfloat', name: 'apfloat', version: '[1.14.0,)')
}
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}
// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
